// O(1) , constant time complexity, doesnot depend on the input size.
// O(logn) , logarithmic time complexity, the time complexity grows logarithmically with the input size, it often tends to halve the input size at each step...
// O(ROOT(n)) , square root time complexity, the time complexity grows with the square root of the input size...
// O(n) , linear time complexity, the time complexity grows linearly with the input size..
// O(nlogn) , linearithmic time complexity, the time complexity grows linearithmically with the input size... it often indicated that the algorithm sorts the input or uses a data structure where each operation takes O(log n ) time...
// O(n^2) , quadratic time complexity, the time complexity grows quadratically with the input size, it often contains two nested loops...
// O(n^3) , cubic time complexity, the time complexity grows cubically with the input size, it often contains three nested loops...
// O(2^n) , exponential time complexity, the time complexity grows exponentially with the input size, it indicated that the algorithm iterates through all subsets of the input element...
// O(n!) , factorial time complexity, the time complexity grows factorially with the input size, it indicated that the algorithm iterates through all permutations of the input elements...
//all polynomial time complexities are considered as efficient, while exponential and factorial time complexities are considered as inefficient... 
//there are many important problmes for which no polynomial time algorithm is known, and it is widely believed that nobody knows how to solve them efficiently...

